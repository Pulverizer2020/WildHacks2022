import warning from 'tiny-warning';
/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

/**
 * Validates the protocol and removes duplicate forward slashes
 *
 * @param url URL to clean
 * @returns Sanitized URL
 */

function sanitizeUrl(url) {
  // ensure that the urls are absolute
  var protocolRegex = /^https?:\/\/[^/]+/;
  var match = url.match(protocolRegex);

  if (match === null) {
    throw new Error("Invalid URL format: " + url);
  } // remove redundant double-forward slashes


  var protocol = match[0];
  var queryUrl = url.substring(protocol.length).replace(/\/\/+/g, '/');
  return protocol + queryUrl;
}
/**
 * Check whether value is an instance of Blob
 *
 * @remark
 * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js
 *
 * @param value Value to check
 * @returns True if the value is a Blob instance
 */


function isBlob(value) {
  if (typeof Blob === 'undefined') {
    return false;
  }

  return value instanceof Blob || Object.prototype.toString.call(value) === '[object Blob]';
} // This is used by deprecated() to keep track of "hits".


var deprecatedHits = {};
/**
 * Create warning for deprecated method usage.
 *
 * This is called once per deprecated method. If this method is called again
 * with the same arguments, no warning is generated.
 *
 * @param methodName Method name for deprecated method
 * @param notice Optional message for deprecation
 */

function deprecated(methodName, notice) {
  var message = "Method " + methodName + " is deprecated.";

  if (notice) {
    message += " " + notice;
  }

  if (deprecatedHits[message]) {
    return;
  }

  deprecatedHits[message] = true;

  if (process.env.NODE_ENV !== 'production') {
    warning(false, message);
  }
}

export { deprecated, isBlob, sanitizeUrl };